// https://www.fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/
// https://gist.github.com/fiznool/73ee9c7a11d1ff80b81c
/**
 * The default alphabet is 25 numbers and lowercase letters.
 * Any numbers that look like letters and vice versa are removed:
 * 1 l, 0 o.
 * Also the following letters are not present, to prevent any
 * expletives: cfhistu
 */
const ALPHABET = '23456789abdegjkmnpqrvwxyz';
const ALPHABET_LENGTH = ALPHABET.length;

/**
 * Governs the number of times we should try to find
 * a unique value before giving up.
 * @type {Number}
 */
const UNIQUE_RETRIES = 9999;

export class HashID {
  // Governs the length of the ID.
  // With an alphabet of 25 chars,
  // a length of 8 gives us 25^8 or
  // 152,587,890,625 possibilities.
  // Should be enough...
  public static ID_LENGTH = 6;
  /**
   * Returns a randomly-generated friendly ID.
   * Note that the friendly ID is not guaranteed to be
   * unique to any other ID generated by this same method,
   * so it is up to you to check for uniqueness.
   * @return {String} friendly ID.
   */
  public static generate() {
    let rtn = '';
    for (let i = 0; i < HashID.ID_LENGTH; i++) {
      rtn += ALPHABET.charAt(Math.floor(Math.random() * ALPHABET_LENGTH));
    }
    return rtn;
  }

  public static generateUnique(previous: Array<string> = []) {
    let retries = 0;
    let id;

    // Try to generate a unique ID,
    // i.e. one that isn't in the previous.
    while (!id && retries < UNIQUE_RETRIES) {
      id = HashID.generate();
      if (previous.indexOf(id) !== -1) {
        id = null;
        retries++;
      }
    }

    return id;
  }
}
